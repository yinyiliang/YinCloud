package com.jackie.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import yyl.yincloud.bean.cityid.CityInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CITY_INFO_BEAN".
*/
public class CityInfoBeanDao extends AbstractDao<CityInfoBean, String> {

    public static final String TABLENAME = "CITY_INFO_BEAN";

    /**
     * Properties of entity CityInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Count = new Property(0, String.class, "count", true, "COUNT");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property N = new Property(2, String.class, "n", false, "N");
        public final static Property PinyinFull = new Property(3, String.class, "pinyinFull", false, "PINYIN_FULL");
        public final static Property PinyinShort = new Property(4, String.class, "pinyinShort", false, "PINYIN_SHORT");
    }


    public CityInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CityInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CITY_INFO_BEAN\" (" + //
                "\"COUNT\" TEXT PRIMARY KEY NOT NULL ," + // 0: count
                "\"ID\" TEXT," + // 1: id
                "\"N\" TEXT," + // 2: n
                "\"PINYIN_FULL\" TEXT," + // 3: pinyinFull
                "\"PINYIN_SHORT\" TEXT);"); // 4: pinyinShort
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CITY_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CityInfoBean entity) {
        stmt.clearBindings();
 
        String count = entity.getCount();
        if (count != null) {
            stmt.bindString(1, count);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String n = entity.getN();
        if (n != null) {
            stmt.bindString(3, n);
        }
 
        String pinyinFull = entity.getPinyinFull();
        if (pinyinFull != null) {
            stmt.bindString(4, pinyinFull);
        }
 
        String pinyinShort = entity.getPinyinShort();
        if (pinyinShort != null) {
            stmt.bindString(5, pinyinShort);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CityInfoBean entity) {
        stmt.clearBindings();
 
        String count = entity.getCount();
        if (count != null) {
            stmt.bindString(1, count);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String n = entity.getN();
        if (n != null) {
            stmt.bindString(3, n);
        }
 
        String pinyinFull = entity.getPinyinFull();
        if (pinyinFull != null) {
            stmt.bindString(4, pinyinFull);
        }
 
        String pinyinShort = entity.getPinyinShort();
        if (pinyinShort != null) {
            stmt.bindString(5, pinyinShort);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CityInfoBean readEntity(Cursor cursor, int offset) {
        CityInfoBean entity = new CityInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // count
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // n
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pinyinFull
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // pinyinShort
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CityInfoBean entity, int offset) {
        entity.setCount(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setN(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPinyinFull(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPinyinShort(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CityInfoBean entity, long rowId) {
        return entity.getCount();
    }
    
    @Override
    public String getKey(CityInfoBean entity) {
        if(entity != null) {
            return entity.getCount();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CityInfoBean entity) {
        return entity.getCount() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
